{"ast":null,"code":"var _jsxFileName = \"/Users/edwinrosemond/Documents/Projects/PreMatch/frontend/src/pages/GameAnalysis.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { getRecentMatches, getRecentRecord } from \"./RecentRecord.js\";\nimport { getMatchProbabilityService } from \"../services/soccerProbabilitiesService.js\";\nimport { matchOdds2 } from \"../SoccerData/MatchOdds\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GameAnalysis(props) {\n  _s();\n\n  const [currentFormScore, setCurrentFormScore] = useState(0);\n  const [scoreColor, setScoreColor] = useState(\"gray\");\n  const [isMounted, setIsMounted] = useState(true);\n  useEffect(() => {\n    async function form() {\n      try {\n        const response = await getCurrentFormScore(props.teamID, props.teamName);\n        setCurrentFormScore(response);\n\n        if (isMounted) {\n          if (parseInt(currentFormScore) < -0.5) {\n            setScoreColor(\"red\");\n          } else if (parseInt(currentFormScore) > -0.5 && currentFormScore < 0.5) {\n            setScoreColor(\"orange\");\n          } else if (parseInt(currentFormScore) > 0.5) {\n            setScoreColor(\"green\");\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    form();\n    return () => {\n      setIsMounted(false);\n    };\n  }, [currentFormScore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: scoreColor\n    },\n    children: [\"Pts Dropped/Gained: \", currentFormScore]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GameAnalysis, \"1xdVNitON+D/iXeSygvd8XJie8Q=\");\n\n_c = GameAnalysis;\n\nasync function getMatchProbability(teamName, matchID) {\n  let matchProbabilities = await getMatchProbabilityService(matchID);\n  matchProbabilities = matchOdds2;\n  let winProb, lossProb, tieProb, home;\n  let found = matchProbabilities.sport_event.competitors.find(e => e.name == teamName);\n\n  if (found) {\n    home = found.qualifier == \"home\" ? \"true\" : \"false\";\n  }\n\n  try {\n    tieProb = matchProbabilities.probabilities.markets[0].outcomes[2].probability;\n    matchProbabilities.probabilities.markets[0].outcomes.forEach((item, index) => {\n      if (home == \"true\") {\n        if (item.name.includes(\"home\")) {\n          winProb = item.probability;\n        } else if (item.name.includes(\"away\")) {\n          lossProb = item.probability;\n        }\n      } else {\n        if (item.name.includes(\"home\")) {\n          lossProb = item.probability;\n        } else if (item.name.includes(\"away\")) {\n          winProb = item.probability;\n        }\n      }\n    });\n  } catch (e) {\n    console.log(\"Error with probability JSON with error \" + e);\n  }\n\n  return [winProb / 100, lossProb / 100, tieProb / 100];\n}\n\nasync function getCurrentFormScore(teamID, teamName) {\n  let recentMatches = await getRecentMatches(teamID);\n  let win, loss, draw, expectedPoints, actualPoints;\n  expectedPoints = 0;\n  actualPoints = 0;\n\n  for (let i = 0; i < recentMatches.length; i++) {\n    [win, loss, draw] = await getMatchProbability(teamName, recentMatches[i].sport_event.id);\n    expectedPoints += win * 3 + draw;\n  }\n\n  let recentRecord = getRecentRecord(recentMatches, teamID);\n  recentRecord.forEach((item, index) => {\n    if (item == \"W\") {\n      actualPoints += 3;\n    }\n\n    if (item == \"D\") {\n      actualPoints += 1;\n    }\n  });\n  return (actualPoints - expectedPoints).toFixed(2);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GameAnalysis\");","map":{"version":3,"sources":["/Users/edwinrosemond/Documents/Projects/PreMatch/frontend/src/pages/GameAnalysis.js"],"names":["React","useEffect","useState","getRecentMatches","getRecentRecord","getMatchProbabilityService","matchOdds2","GameAnalysis","props","currentFormScore","setCurrentFormScore","scoreColor","setScoreColor","isMounted","setIsMounted","form","response","getCurrentFormScore","teamID","teamName","parseInt","e","console","log","color","getMatchProbability","matchID","matchProbabilities","winProb","lossProb","tieProb","home","found","sport_event","competitors","find","name","qualifier","probabilities","markets","outcomes","probability","forEach","item","index","includes","recentMatches","win","loss","draw","expectedPoints","actualPoints","i","length","id","recentRecord","toFixed"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getRecentMatches, getRecentRecord } from \"./RecentRecord.js\";\nimport { getMatchProbabilityService } from \"../services/soccerProbabilitiesService.js\";\nimport { matchOdds2 } from \"../SoccerData/MatchOdds\";\n\nexport function GameAnalysis(props) {\n  const [currentFormScore, setCurrentFormScore] = useState(0);\n  const [scoreColor, setScoreColor] = useState(\"gray\");\n  const [isMounted, setIsMounted] = useState(true);\n  useEffect(() => {\n    async function form() {\n      try {\n        const response = await getCurrentFormScore(\n          props.teamID,\n          props.teamName\n        );\n        setCurrentFormScore(response);\n        if (isMounted) {\n          if (parseInt(currentFormScore) < -0.5) {\n            setScoreColor(\"red\");\n          } else if (\n            parseInt(currentFormScore) > -0.5 &&\n            currentFormScore < 0.5\n          ) {\n            setScoreColor(\"orange\");\n          } else if (parseInt(currentFormScore) > 0.5) {\n            setScoreColor(\"green\");\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    form();\n\n    return () => {\n      setIsMounted(false);\n    };\n  }, [currentFormScore]);\n  return (\n    <div style={{ color: scoreColor }}>\n      Pts Dropped/Gained: {currentFormScore}\n    </div>\n  );\n}\n\nasync function getMatchProbability(teamName, matchID) {\n  let matchProbabilities = await getMatchProbabilityService(matchID);\n  matchProbabilities = matchOdds2;\n\n  let winProb, lossProb, tieProb, home;\n  let found = matchProbabilities.sport_event.competitors.find(\n    (e) => e.name == teamName\n  );\n  if (found) {\n    home = found.qualifier == \"home\" ? \"true\" : \"false\";\n  }\n\n  try {\n    tieProb =\n      matchProbabilities.probabilities.markets[0].outcomes[2].probability;\n    matchProbabilities.probabilities.markets[0].outcomes.forEach(\n      (item, index) => {\n        if (home == \"true\") {\n          if (item.name.includes(\"home\")) {\n            winProb = item.probability;\n          } else if (item.name.includes(\"away\")) {\n            lossProb = item.probability;\n          }\n        } else {\n          if (item.name.includes(\"home\")) {\n            lossProb = item.probability;\n          } else if (item.name.includes(\"away\")) {\n            winProb = item.probability;\n          }\n        }\n      }\n    );\n  } catch (e) {\n    console.log(\"Error with probability JSON with error \" + e);\n  }\n\n  return [winProb / 100, lossProb / 100, tieProb / 100];\n}\n\nasync function getCurrentFormScore(teamID, teamName) {\n  let recentMatches = await getRecentMatches(teamID);\n  let win, loss, draw, expectedPoints, actualPoints;\n  expectedPoints = 0;\n  actualPoints = 0;\n  for (let i = 0; i < recentMatches.length; i++) {\n    [win, loss, draw] = await getMatchProbability(\n      teamName,\n      recentMatches[i].sport_event.id\n    );\n    expectedPoints += win * 3 + draw;\n  }\n  let recentRecord = getRecentRecord(recentMatches, teamID);\n  recentRecord.forEach((item, index) => {\n    if (item == \"W\") {\n      actualPoints += 3;\n    }\n    if (item == \"D\") {\n      actualPoints += 1;\n    }\n  });\n  return (actualPoints - expectedPoints).toFixed(2);\n}\n"]},"metadata":{},"sourceType":"module"}