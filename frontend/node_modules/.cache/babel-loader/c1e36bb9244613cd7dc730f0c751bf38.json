{"ast":null,"code":"var _jsxFileName = \"/Users/edwinrosemond/Documents/Projects/PreMatch/frontend/src/pages/Standings.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport SidebarLink from \"./SidebarLink\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Standings() {\n  _s();\n\n  const [standings, setStandings] = useState();\n  useEffect(() => {\n    async function init() {\n      try {\n        // console.log(\"getting standings\");\n        const response = await getStandings();\n        setStandings(response);\n        console.log(\"standings loaded\");\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    init();\n  }, []);\n\n  if (standings) {\n    console.log(\"these are the standings\");\n    console.log(standings);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \".8em\"\n      },\n      className: \"sidebar\",\n      children: standings.standings[0].groups[0].standings.map(e => {\n        const obj = e.competitor;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(SidebarLink, {\n            rank: e.rank,\n            name: obj.name,\n            points: e.points\n          }, e.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this) // <tr key={obj.id}>\n        //   <td>{e.rank}</td>\n        //   <td style={{ padding: \".3em\" }}>{obj.name}</td>\n        //   <td>{e.points}</td>\n        // </tr>\n        ;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(Standings, \"TYgTFNe1GRzFZ2wft3tPboE0w0g=\");\n\n_c = Standings;\n\nasync function getStandings() {\n  let url = \"http://localhost:5000/api/standings\";\n  let liveStandings = await fetch(url); // checking content type to confirm it's json\n  // const contentType = liveStandings.headers.get(\"content-type\");\n  // console.log(contentType);\n\n  console.log(\"live standings in function\");\n  let jsonResult = await liveStandings.json();\n  console.log(jsonResult);\n  return jsonResult;\n} // async function test() {\n//   let url = \"http://localhost:5000/api/preMatch\";\n//   const response = await fetch(url);\n//   console.log(response);\n// }\n\n\nvar _c;\n\n$RefreshReg$(_c, \"Standings\");","map":{"version":3,"sources":["/Users/edwinrosemond/Documents/Projects/PreMatch/frontend/src/pages/Standings.js"],"names":["useEffect","useState","SidebarLink","Standings","standings","setStandings","init","response","getStandings","console","log","e","fontSize","groups","map","obj","competitor","rank","name","points","key","url","liveStandings","fetch","jsonResult","json"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,EAA1C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeM,IAAf,GAAsB;AACpB,UAAI;AACF;AACA,cAAMC,QAAQ,GAAG,MAAMC,YAAY,EAAnC;AACAH,QAAAA,YAAY,CAACE,QAAD,CAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,OALD,CAKE,OAAOC,CAAP,EAAU;AACVF,QAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACD;AACF;;AACDL,IAAAA,IAAI;AACL,GAZQ,EAYN,EAZM,CAAT;;AAaA,MAAIF,SAAJ,EAAe;AACbK,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACA,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEQ,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAkC,MAAA,SAAS,EAAC,SAA5C;AAAA,gBACGR,SAAS,CAACA,SAAV,CAAoB,CAApB,EAAuBS,MAAvB,CAA8B,CAA9B,EAAiCT,SAAjC,CAA2CU,GAA3C,CAAgDH,CAAD,IAAO;AACrD,cAAMI,GAAG,GAAGJ,CAAC,CAACK,UAAd;AACA,4BACE;AAAA,iCACE,QAAC,WAAD;AACE,YAAA,IAAI,EAAEL,CAAC,CAACM,IADV;AAEE,YAAA,IAAI,EAAEF,GAAG,CAACG,IAFZ;AAGE,YAAA,MAAM,EAAEP,CAAC,CAACQ;AAHZ,aAIOR,CAAC,CAACS,GAJT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,CASE;AACA;AACA;AACA;AACA;AAbF;AAeD,OAjBA;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD,GAzBD,MAyBO;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF;;GA3CuBjB,S;;KAAAA,S;;AA6CxB,eAAeK,YAAf,GAA8B;AAC5B,MAAIa,GAAG,GAAG,qCAAV;AACA,MAAIC,aAAa,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA/B,CAF4B,CAG5B;AACA;AACA;;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,MAAIc,UAAU,GAAG,MAAMF,aAAa,CAACG,IAAd,EAAvB;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAYc,UAAZ;AACA,SAAOA,UAAP;AACD,C,CACD;AACA;AACA;AACA;AACA","sourcesContent":["import { useEffect, useState } from \"react\";\nimport SidebarLink from \"./SidebarLink\";\n\nexport default function Standings() {\n  const [standings, setStandings] = useState();\n  useEffect(() => {\n    async function init() {\n      try {\n        // console.log(\"getting standings\");\n        const response = await getStandings();\n        setStandings(response);\n        console.log(\"standings loaded\");\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    init();\n  }, []);\n  if (standings) {\n    console.log(\"these are the standings\");\n    console.log(standings);\n    return (\n      <div style={{ fontSize: \".8em\" }} className=\"sidebar\">\n        {standings.standings[0].groups[0].standings.map((e) => {\n          const obj = e.competitor;\n          return (\n            <span>\n              <SidebarLink\n                rank={e.rank}\n                name={obj.name}\n                points={e.points}\n                key={e.key}\n              />\n            </span>\n            // <tr key={obj.id}>\n            //   <td>{e.rank}</td>\n            //   <td style={{ padding: \".3em\" }}>{obj.name}</td>\n            //   <td>{e.points}</td>\n            // </tr>\n          );\n        })}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n}\n\nasync function getStandings() {\n  let url = \"http://localhost:5000/api/standings\";\n  let liveStandings = await fetch(url);\n  // checking content type to confirm it's json\n  // const contentType = liveStandings.headers.get(\"content-type\");\n  // console.log(contentType);\n  console.log(\"live standings in function\");\n  let jsonResult = await liveStandings.json();\n  console.log(jsonResult);\n  return jsonResult;\n}\n// async function test() {\n//   let url = \"http://localhost:5000/api/preMatch\";\n//   const response = await fetch(url);\n//   console.log(response);\n// }\n"]},"metadata":{},"sourceType":"module"}